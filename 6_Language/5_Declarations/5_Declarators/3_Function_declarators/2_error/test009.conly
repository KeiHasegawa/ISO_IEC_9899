/*
 * 6.5.5.3 Function declarators (including prototypes)
 *
 * For two function types to be compatible, both shall specify compatible
 * return types. Moreover, the parameter type lists, if both are present,
 * shall agree in the number of parameters and in use of the ellipsis
 * terminator; corresponding parameters shall have compatible types. If one
 * type has a parameter type list and the other type is specified by a function
 * declarator that is not part of a function definition and that contains an
 * empty identifier list, the parameter list shall not have an ellipsis
 * terminator and the type of each parameter shall be compatible with the
 * type that results from the application of the default argument promotions.
 * If one type has a parameter type list and the other type is specified by a
 * function definition that contains a (possibly empty) identifier list, both
 * shall agree in the number of parameters, and the type of each prototype
 * parameter shall be compatible with the type that results from the
 * application of the default argument promotions to the type of the
 * corresponding identifier. (In the determination of type compatibility and of
 * a composite type, each parameter declared with function or array type is
 * taken as having the type that results from conversion to a pointer type, as
 * in 6.7.1, and each parameter declared with qualified type is taken as having
 * the unqualified version of its declared type.)
 */
void f0(int);
void f0(int, ...);  /* error : redeclaration */

void f1(int);
void f1();    /* ok */

void f2(int, ...);
void f2();           /* error : redeclaration */

void f3(char);
void f3();      /* error : `char' is promoted to `int' */

void f4()  /* old style function definition, not declaration */
{
}

void f4(int);  /* error : redeclaration */

void f5(a)   /* old style function definition, not declaration */
  int a;
{
}

void f5(int);  /* ok */

void f6(a)   /* old style function definition, not declaration */
  float a;
{
}

void f6(float);  /* error */

void f7();
void f7();  /* ok */

void f8();
void f8(int, double);  /* ok */
